{"version":3,"sources":["assets/img/star.svg","assets/img/bed.svg","assets/img/heart.svg","assets/img/buy.svg","components/Bed/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bed","className","src","bedImg","alt","starImg","href","type","heartImg","buyImg","App","useState","id","data","setData","observer","useRef","lastElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","length","observe","map","item","ref","key","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,2PCgE5BC,G,MAxDH,WACV,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,sBAAsBC,IAAKC,IAAQC,IAAI,SAExD,yBAAKH,UAAU,oBACb,yBAAKA,UAAU,0BAAf,kMAGA,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,kCACb,yBAAKC,IAAKG,IAASD,IAAI,WACvB,yBAAKF,IAAKG,IAASD,IAAI,WACvB,yBAAKF,IAAKG,IAASD,IAAI,WACvB,yBAAKF,IAAKG,IAASD,IAAI,WACvB,yBAAKF,IAAKG,IAASD,IAAI,YAEzB,yBAAKH,UAAU,iCAAf,QAIF,yBAAKA,UAAU,2BAAf,iBAGA,yBAAKA,UAAU,0BAAf,wCAGA,yBAAKA,UAAU,0BAAf,kCAGA,yBAAKA,UAAU,0BAAf,qDAGA,yBAAKA,UAAU,0BAAf,yIAGA,yBAAKA,UAAU,4BACb,uBAAGK,KAAK,IAAIL,UAAU,kCAAtB,kBAKJ,yBAAKA,UAAU,qBACb,4BAAQM,KAAK,SAASN,UAAU,2BAC9B,yBAAKC,IAAKM,IAAUJ,IAAI,WAE1B,4BAAQG,KAAK,SAASN,UAAU,0BAC9B,yBAAKC,IAAKO,IAAQL,IAAI,MAAMH,UAAU,gCADxC,4CCeOS,G,MAhEH,WAAO,IAAD,EAEQC,mBACtB,CACE,CAAC,UAAc,kBAAC,EAAD,MAASC,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,GAC5B,CAAC,UAAc,kBAAC,EAAD,MAASA,GAAI,KAXhB,mBAETC,EAFS,KAEHC,EAFG,KAeVC,EAAWC,mBACXC,EAAiBC,uBAAY,SAAAC,GAC7BJ,EAASK,SAASL,EAASK,QAAQC,aAEvCN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACtCA,EAAQ,GAAGC,gBACbV,EAAQ,YACED,GADH,OAEF,CAAC,CAAC,UAAc,kBAAC,EAAD,MAASD,GAAIC,EAAKY,OAAS,GAC9C,CAAC,UAAc,kBAAC,EAAD,MAASb,GAAIC,EAAKY,OAAS,GAC1C,CAAC,UAAc,kBAAC,EAAD,MAASb,GAAIC,EAAKY,OAAS,SAG5CN,GACFJ,EAASK,QAAQM,QAAQP,KAE1B,CAACN,IAEJ,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,gBAEXY,EAAKc,KAAI,SAACC,GACN,OAAIf,EAAKY,SAAWG,EAAKhB,GAEzB,yBACEX,UAAU,qBACV4B,IAAKZ,EACLa,IAAKF,EAAKhB,IAETgB,EAAKG,WAKN,yBACE9B,UAAU,qBACV6B,IAAKF,EAAKhB,IAETgB,EAAKG,kBChDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6595f338.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.f4e74d87.svg\";","module.exports = __webpack_public_path__ + \"static/media/bed.7eaa526a.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.8b0126c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/buy.b66fdd79.svg\";","import React from \"react\";\nimport bedImg from '../../assets/img/bed.svg';\nimport starImg from  '../../assets/img/star.svg';\nimport heartImg from '../../assets/img/heart.svg';\nimport buyImg from '../../assets/img/buy.svg'\n\nimport './style.scss';\n\nconst Bed = () => {\n  return (\n    <div className='bed'>\n      <div className=\"bed__container\">\n        <img className=\"bed__container__img\" src={bedImg} alt=\"bed\"/>\n      </div>\n      <div className=\"bed__information\">\n        <div className=\"bed__information__name\">\n          Тумба прикроватная Rubus с двумя ящиками\n        </div>\n        <div className=\"bed__information__rating\">\n          <div className=\"bed__information__rating__star\">\n            <img src={starImg} alt=\"rating\"/>\n            <img src={starImg} alt=\"rating\"/>\n            <img src={starImg} alt=\"rating\"/>\n            <img src={starImg} alt=\"rating\"/>\n            <img src={starImg} alt=\"rating\"/>\n          </div>\n          <div className=\"bed__information__rating__num\">\n            4.8\n          </div>\n          </div>\n        <div className=\"bed__information__price\">\n          56 720 Р\n        </div>\n        <div className=\"bed__information__info\">\n          Черный\n        </div>\n        <div className=\"bed__information__info\">\n          Ткань\n        </div>\n        <div className=\"bed__information__info\">\n          ш. 349 х в. 234 х г. 323\n        </div>\n        <div className=\"bed__information__info\">\n          Французская раскладушка\n        </div>\n        <div className=\"bed__information__seller\">\n          <a href=\"/\" className=\"bed__information__seller__link\" >\n            Laska Family\n          </a>\n        </div>\n      </div>\n      <div className='bed__bottomButton'>\n        <button type='button' className='bed__bottomButton__like'>\n          <img src={heartImg} alt=\"heart\"/>\n        </button>\n        <button type='button' className='bed__bottomButton__buy'>\n          <img src={buyImg} alt=\"buy\" className='bed__bottomButton__buy__img'/>\n          купить\n        </button>\n      </div>\n    </div>\n  )\n};\n\nexport default Bed;\n","import React, { useCallback, useRef, useState} from 'react';\nimport Bed from \"./components/Bed\";\n\nimport './App.scss';\n\n\nconst App = () => {\n\n  const [data, setData] = useState(\n    [\n      {'component' : <Bed />, id: 1},\n      {'component' : <Bed />, id: 2},\n      {'component' : <Bed />, id: 3},\n      {'component' : <Bed />, id: 4},\n      {'component' : <Bed />, id: 5},\n      {'component' : <Bed />, id: 6},\n      {'component' : <Bed />, id: 7},\n      {'component' : <Bed />, id: 8},\n    ]\n  );\n\n  const observer = useRef();\n  const lastElementRef = useCallback(node => {\n    if (observer.current) observer.current.disconnect();\n\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        setData(\n          [...[...data],\n          ...[{'component' : <Bed />, id: data.length + 2},\n          {'component' : <Bed />, id: data.length + 3},\n          {'component' : <Bed />, id: data.length + 4}]]\n          );\n    }});\n    if (node) {\n      observer.current.observe(node);\n    }\n  }, [data]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__wrapper\">\n        {\n          data.map((item) => {\n              if (data.length === item.id) {\n              return (\n              <div\n                className='app__wrapper__item'\n                ref={lastElementRef}\n                key={item.id}\n              >\n                {item.component}\n              </div>\n              )\n            } else {\n              return (\n                <div\n                  className='app__wrapper__item'\n                  key={item.id}\n                >\n                  {item.component}\n                </div>\n              )\n            }})\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}